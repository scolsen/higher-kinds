;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load-once "typeclasses/functor.carp")
(load-once "typeclasses/applicative.carp")
(load-once "typeclasses/monad.carp")

(defmodule Array
  (defmodule Functor
    (implements fmap fmap)
    (defn fmap [f arr]
      (copy-map &(fn [x] (~f @x)) &arr))
    (implements fmap! fmap!)
    (defn fmap! [f arr]
      (for [i 0 (length arr)]
        (let-do [v @(unsafe-nth arr i)]
          (aset! arr i (~f v)))))
  )

  (defmodule Applicative
    (implements pure pure)
    (defn pure [x] [x])

    (implements sequence sequence)
    (defn sequence [fs xs]
      (let-do [result (the (Array (Array b)) (allocate (length &fs)))]
        (for [i 0 (length &fs)]
          (let [f (unsafe-nth &fs i)]
            (Array.aset-uninitialized! &result i (fmap f @&xs))))
        (concat &result)))

   (implements sequence! sequence!)
   (defn sequence! [fs xs]
     (for [i 0 (length fs)]
       (let [f (unsafe-nth fs i)]
         (fmap! f xs))))
  )

  (defmodule Monad
    (implements bind bind)
    (defn bind [arr f]
      (let-do [result (the (Array (Array b)) (allocate (length &arr)))]
        (for [i 0 (length &arr)]
          (Array.aset-uninitialized! &result i (~f @(unsafe-nth &arr i))))
        (concat &result)))
    (implements bind! bind!)
    (defn bind! [arr f]
      (let-do [temp @arr
               arr* (the (Ptr (Array a)) (Unsafe.coerce arr))
               _ (Pointer.to-value arr*)
               result (the (Array (Array a)) (zero))]
           (for [i 0 (length &temp)]
             (Array.push-back! &result (~f @(unsafe-nth &temp i))))
           (Pointer.set arr* (concat &result))))
  )
)

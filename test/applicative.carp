(load "Test.carp")
(load "Maybe.carp")
(use Test)

(load "../typeclasses.carp")
(use Applicative)

(defmodule Maybe 
  (defn fmap [f m] 
    (match m
      (Maybe.Just x) (Maybe.Just (~f x))
      (Maybe.Nothing) (Maybe.Nothing)))
  (defn lift [x] (Maybe.Just x))
  (defn sequence [mf mx]
    (match mf 
      (Maybe.Nothing) (Maybe.Nothing)
      (Maybe.Just f) (fmap &f mx))))

(defn ref-then-slice [s x y]
  (String.slice &s x y))

(deftest test
  (assert-equal test 
    &(Maybe.lift 1)
    &(Maybe.Just 1)
    "lift works as expected")
  (assert-equal test
    &(sequence (lift inc) (Maybe.Just 1))
    &(Maybe.Just 2)
    "sequence works as expected")
  (assert-equal test
    &(lift-unary inc (Maybe.Just 1))
    &(Maybe.Just 2)
    "lift-unary works as expected")
  (assert-equal test
    &(Maybe.Just 5)
    &(lift-binary + (Maybe.Just 2) (Maybe.Just 3))
    "lift-binary works as expected")
  ;; Currently results in a runtime error.
  ;(assert-equal test
  ;  &(Maybe.construct (lift-ternary ref-then-slice 
  ;    (Maybe.applicative (Maybe.Just @"foobarbaz")) 
  ;    (Maybe.applicative (Maybe.Just 0)) 
  ;    (Maybe.applicative (Maybe.Just 3))))
  ;  &(Maybe.Just @"foo")
  ;  "lift-ternary works as expected")
  (assert-equal test
    &(ignore-first (lift Int.inc) (Maybe.Just 1))
    &(Maybe.Just 1)
    "ignore-first works as expected")
  (assert-equal test
    &(ignore-second (Maybe.Just 1) (Maybe.Just 0))
    &(Maybe.Just 1)
    "ignore-second works as expected")
)

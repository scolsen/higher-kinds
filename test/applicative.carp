;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load "typeclasses/applicative.carp")
(load "test/box.carp")
(load "Test.carp")
(use Test)

(deftest test
  (assert-equal test
    &(Box.pure 1)
    &(Box 1)
    "pure works as expected")
  (assert-equal test
    &(sequence (pure inc) (Box 1))
    &(Box 2)
    "sequence works as expected")
  (assert-equal test
    &(let-do [b (Box 1)] (sequence! &(pure inc) &b) b)
    &(Box 2)
    "sequence! works as expected")
  (assert-equal test
    &(Applicative.lift &inc (Box 1))
    &(Box 2)
    "lift works as expected")
  (assert-equal test
    &(let-do [b (Box 1)] (Applicative.lift! &inc &b) b)
    &(Box 2)
    "lift! works as expected")
  (assert-equal test
    &(Box 5)
    &(Applicative.bi-lift &(fn [x y] (+ @x y)) (Box 2) (Box 3))
    "bi-lift works as expected")
  (assert-equal test
    &[(Box 5) (Box 3)]
    &(let-do [b (Box 2) b2 (Box 3)]
      (Applicative.bi-lift-first! &(fn [x y] (+ @x y)) &b &b2) [b b2])
    "bi-lifti-first! works as expected")
  (assert-equal test
    &[(Box 2) (Box 5)]
    &(let-do [b (Box 2) b2 (Box 3)]
      (Applicative.bi-lift-second! &(fn [x y] (+ @x y)) &b &b2) [b b2])
    "bi-lifti-second! works as expected")
  (assert-equal test
    &(Applicative.ignore-first (pure Int.inc) (Box 1))
    &(Box 1)
    "ignore-first works as expected")
  (assert-equal test
    &(let-do [b (Box 1)] (Applicative.ignore-first! &(Box.pure Int.inc) &b) b)
    &(Box 1)
    "ignore-first! works as expected")
  (assert-equal test
    &(let-do [b (Box 1)] (Applicative.ignore-second! &b &(Box.pure 0)) b)
    &(Box 1)
    "ignore-second! works as expected")
  (assert-equal test
    &(Applicative.ignore-second (Box 1) (Box 0))
    &(Box 1)
    "ignore-second works as expected")
)

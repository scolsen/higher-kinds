;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load "typeclasses/functor.carp")
(load "typeclasses/applicative.carp")
(load "typeclasses/monad.carp")

;; Just a simple generic wrapper type we use for testing
(deftype (Box a) [value a])

(defmodule Box
    (implements fmap fmap)
    (defn fmap [f box]
      (Box (~f @(Box.value &box))))
    (implements fmap! fmap!)
    (defn fmap! [f box]
      (Box.set-value! box (~f @(Box.value box))))
    (implements pure pure)
    (defn pure [x] (Box x))
    (implements sequence sequence)
    (defn sequence [box-f box]
      (fmap (Box.value &box-f) box))
    (implements sequence! sequence!)
    (defn sequence! [box-f box]
      (fmap! (Box.value box-f) box))
    (implements bind bind)
    (defn bind [box f]
      (the (Box b) (~f @(Box.value &box))))
    (implements bind! bind!)
    (defn bind! [box f]
      (let [box* ((the (Fn [&(Box a)] (Ptr (Box a))) Unsafe.coerce) box)]
        (Pointer.set box* (~f @(Box.value box)))))
    (implements = =)
    (defn = [box-a box-b]
      (= (Box.value box-a) (Box.value box-b)))
)

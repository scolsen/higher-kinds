(load "Test.carp")
(use Test)

(load "../typeclasses.carp")

(use Monad)
(defmodule Maybe 
  (defn fmap [f m] 
    (match m
      (Maybe.Just x) (Maybe.Just (~f x))
      (Maybe.Nothing) (Maybe.Nothing)))
  (defn lift [x] (Maybe.Just x))
  (defn sequence [mf mx]
    (match mf 
      (Maybe.Nothing) (Maybe.Nothing)
      (Maybe.Just f) (fmap &f mx)))
  (defn bind [ma f] 
    (match ma
      (Maybe.Nothing) (Maybe.Nothing)
      (Maybe.Just x) (~f x)))
  (defn <- [m] 
    (match m
      (Maybe.Nothing) (zero)
      (Maybe.Just x) x)))

(defn ref-then-slice [s x y]
  (String.slice &s x y))

(defn if-one [x] (if (= x 1) (Maybe.Just 100) (Maybe.Nothing)))

(deftest test
  (assert-equal test
    &(Maybe.Just 100)
    &(bind (Maybe.Just 1) &if-one)
    "bind works as expected")
  (assert-equal test
    &(Maybe.Just \a)
    &(return \a)
    "return works as expected")
  (assert-equal test
    &(Maybe.Just 2)
    &(join (Maybe.Just (Maybe.Just 2)))
    "join works as expected")
  (assert-equal test
    &(the (Maybe Int) (Maybe.Nothing))
    &(reverse-bind &if-one (Maybe.Just 4))
    "reverse-bind works as expected")
  (assert-equal test
    &(Maybe.Just 3)
    &(apply (Maybe.lift Int.inc) (Maybe.Just 2))
    "apply works as expected")
  (assert-equal test
    &(Maybe.Just @"foo")
    &(lift-ternary ref-then-slice (Maybe.Just @"foobar")
                                  (Maybe.Just 0)
                                  (Maybe.Just 3))
    "lift-ternary works as expected")
)

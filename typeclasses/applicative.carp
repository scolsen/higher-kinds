;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load-once "typeclasses/functor.carp")

(definterface pure (Fn [a] (f a)))
(doc pure
  "Lifts a 'pure' value into a constructor for a given type."
  ""
  "```"
  "(Maybe.pure 0)"
  "=> (Just 0)"
  "```")

(definterface sequence
  (Fn [(f (Fn [a] b)) (f a)] (f b)))
(doc sequence
  ("Sequences a computation embedded in type `f` by applying it " false)
  "to a value in type `f`."
  ""
  "```"
  "(sequence (Maybe.Just inc) (Maybe.Just 2))"
  "=> (Maybe.Just 3)"
  "```")

(definterface sequence!
  (Fn [(Ref (f (Fn [a] a))) (Ref (f a))] Unit))
(doc sequence!
  ("Sequences a computation in type `f` by applying it to a value in  " false)
  "type `f` in-place."
  ""
  "```"
  "(let-do [m (Maybe.Just 2)] (sequence! &(Maybe.Just inc) &m) m)"
  "=> (Just 3)"
  "```")

(defmodule Applicative
  (doc lift
    ("Lifts a unary function into an applicative structure " false)
    "and applies it to `applicative`."
    ""
    "```"
    "(lift &inc (Maybe.Just 2))"
    "=> (Just 3)"
    "```")
  (sig lift (Fn [(Ref (Fn [a] b)) (f a)] (f b)))
  (defn lift [f applicative]
    (sequence (pure @f) applicative))

  (doc lift!
    ("Lifts a unary function into an applicative structure " false)
    "and applies it to `applicative` in-place."
    ""
    "```"
    "(let-do [m (Maybe.Just 2)] (lift! &inc &m) m)"
    "=> (Just 3)"
    "```")
  (sig lift! (Fn [(Ref (Fn [a] a)) (Ref (f a))] Unit))
  (defn lift! [f applicative]
    (sequence! &(pure @f) applicative))

  (doc bi-lift
    "Lifts a binary function into an applicative structure."
    ""
    "```"
    "(bi-lift (fn [x y] (+ @x y)) (Maybe.Just 1) (Maybe.Just 2))"
    "(Just 3)"
    "```")
  (defn bi-lift [f applicative-a applicative-b]
    ;; partial *must* pass x by reference here to avoid a double-free.
    ;; This is an edge case the compiler doesn't catch yet.
    (let [partial (fn [x] (fn [y] (~f &x y)))]
      (sequence (fmap &partial applicative-a) applicative-b)))

  (doc bi-lift-first!
    ("Lifts a binary function into an applicative structure in place " false)
    ("in the first structure passed as an argument, leaving the second " false)
    "intact."
    ""
    "```"
    "(let-do [m1 (Maybe.Just @\"ca\") m2 (Maybe.Just @\"rp\")]"
    "  (bi-lift-first! &(fn [x y] (append x &y)) &m2 &m1) "
    "    (println* &m1) (println* m2))"
    "=> (Just \"ca\") ;; m1"
    "=> (Just \"carp\") ;; m2"
    "```")
  (sig bi-lift-first! (Fn [(Ref (Fn [(Ref a) a] a)) (Ref (f a)) (Ref (f a))] Unit))
  (defn bi-lift-first! [f applicative-a applicative-b]
    (let [partial (fn [x] (fn [y] (~f &x y)))]
      (sequence! &(fmap &partial @applicative-b) applicative-a)))

  (doc bi-lift-second!
    ("Lifts a binary function into an applicative structure in place " false)
    ("in the second structure passed as an argument, leaving the first " false)
    "intact."
    ""
    "```"
    "(let-do [m1 (Maybe.Just @\"ca\") m2 (Maybe.Just @\"rp\")]"
    "  (bi-lift-first! &(fn [x y] (append x &y)) &m1 &m2) "
    "    (println* &m1) (println* m2))"
    "=> (Just \"ca\") ;; m1"
    "=> (Just \"carp\") ;; m2"
    "```")
  (sig bi-lift-second! (Fn [(Ref (Fn [(Ref a) a] a)) (Ref (f a)) (Ref (f a))] Unit))
  (defn bi-lift-second! [f applicative-a applicative-b]
    (let [partial (fn [x] (fn [y] (~f &x y)))]
      (sequence! &(fmap &partial @applicative-a) applicative-b)))

  (doc ignore-first
    "Sequences two applicatives, ignoring the first argument."
    ""
    "```"
    "(ignore-first (Maybe.Just inc) (Maybe.Just 2))"
    "=> (Just 2)"
    "```")
  (defn ignore-first [_ applicative-b]
    (sequence (Functor.replace id _) applicative-b))

  (doc ignore-first!
    "Sequences two applicatives in-place, ignoring the first argument."
    ""
    "```"
    "(let-do [m (Maybe.Just 2)] (ignore-first! &(Maybe.Just inc) &m) m)"
    "=> (Just 2)"
    "```")
  (defn ignore-first! [_ applicative]
    (lift! &id applicative))

  (doc ignore-second
    "Sequences two applicatives, ignoring the second argument."
    ""
    "```"
    "(ignore-second (Maybe.Just inc) (Maybe.Just 2))"
    "=> (Just inc)"
    "```")
  (defn ignore-second [applicative-a _]
    (sequence (fmap &const applicative-a) _))

  (doc ignore-second!
    "Sequences two applicatives in-place, ignoring the second argument."
    "(let-do [m (Maybe.Just inc)] (ignore-second! &m &(Maybe.Just 2)) m)"
    "=> (Just inc)")
  (defn ignore-second! [applicative _]
    (lift! &id applicative))

  (defndynamic seq-internal [f g args acc]
    (if (= (length args) 0)
        acc
        (Applicative.seq-internal f g (cdr args)
          (cons-last (car args) (list g f acc)))))

  (doc *>
    "Combine any number of applicatives using the binary function `binary-f`."
    ""
    "```"
    "(*> &(fn [x y] (append x &y))"
    "    (Maybe.Just @\"Life\")"
    "    (Maybe.Just @\" is\")"
    "    (Maybe.Just @\" but\")"
    "    (Maybe.Just @\" a\")"
    "    (Maybe.Just @\" brief\")"
    "    (Maybe.Just @\" candle.\"))"
    "=> (Just \"Life is but a brief candle.\")"
    "```")
  (defmacro *> [binary-f :rest args]
    (Applicative.seq-internal binary-f 'Applicative.bi-lift (cddr args)
      (list 'Applicative.bi-lift binary-f (car args) (cadr args))))
)


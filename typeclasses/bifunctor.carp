;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load "typeclasses/functor.carp")
(load "typeclasses/applicative.carp")
(load "typeclasses/monad.carp")

(load "instances/id.carp")

(definterface bimap (Fn [(Ref (Fn [a] c)) (Ref (Fn [b] d)) (f a b)] (f c d)))
(doc bimap
  "Maps two functions over the components of a type with two inhabitants, describing a bifunctor."
  "Implementations should satisfy the equations:"
  ""
  "```"
  "identity: "
  "  (bimap id id bifunctor) === (id bifunctor)"
  "composition: "
  "  (bimap (compose h f) (compose k g) bifunctor) === (bimap h k (bimap f g bifunctor))"
  "```"
  ""
  "```"
  "(bimap &inc &even? (Pair 2 2))"
  "=> (Pair 3 true)"
  "```")

(definterface bimap! (Fn [(Ref (Fn [a] c)) (Ref (Fn [b] d)) (Ref (f a b))] Unit))
(doc bimap!
  "Maps two functions over the components of a type with two inhabitants in-place, describing a bifunctor."
  ""
  "```"
  "(let-do [p (Pair 2 2)] (bimap! &inc &even? p) p)"
  "=> (Pair 3 true)"
  "```")

(definterface transforml (Fn [(g a b)] (f a)))
(doc transforml
  ("Defines a natural transformation from a bifunctor's left component " false)
  "to an arbitrary functor."
  "Implementations should satisfy the equation:"
  ""
  "```"
  "commutation:"
  "  (transforml (bimap f g bifunctor)) === (fmap f (transforml bifunctor))"
  "```"
  "")

(definterface transformr (Fn [(g a b)] (f b)))
(doc transformr
  ("Defines a natural transformation from a bifunctor's right component " false)
  "to an arbitrary functor."
  "Implementations should satisfy the equation:"
  ""
  "```"
  "commutation:"
  "  (transformr (bimap f g bifunctor)) === (fmap g (transformr bifunctor))"
  "```"
  "")

(definterface product (Fn [(f a) (g b)] (h a b)))
(doc product
  "Takes a two functors to a bifunctor."
  "Implementations should satisfy the equation:"
  ""
  "```"
  "isomorphism (with transforml and transformr):"
  "  (id bifunctor) === (product (left bifunctor) (right bifunctor))"
  "```"
  ""
  "```"
  "(product (Id 2) (Id \a))"
  "(Pair 2 \a)"
  "```")

(defmodule Bifunctor
  (doc mapl
    "Maps a function over the left component of a bifunctor."
    ""
    "```"
    "(mapl &even? (Pair 2 2))"
    "=> (Pair true 2)"
    "```")
  (sig mapl (Fn [(Ref (Fn [a] c)) (f a b)] (f c b)))
  (defn mapl [f bifunctor]
    (bimap f &id bifunctor))

  (doc mapl!
    "Maps a function over the left component of a bifunctor, in-place."
    ""
    "```"
    "(let-do [p (Pair 0 0)] (mapl! &inc &p) p)"
    "=> (Pair 1 0)"
    "```")
  (defn mapl! [f bifunctor]
    (bimap! f &id bifunctor))

  (doc mapr
    "Maps a function over the right component of a bifunctor."
    ""
    "```"
    "(mapr &even? (Pair 0 1)"
    "=> (Pair 0 false))"
    "```")
  (sig mapr (Fn [(Ref (Fn [b] d)) (f a b)] (f a d)))
  (defn mapr [g bifunctor]
    (bimap &id g bifunctor))

  (doc mapr!
    "Maps a function over the right component of a bifunctor, in-place."
    ""
    "```"
    "(let-do [p (Pair 0 0)] (mapr! &inc &p) p)"
    "=> (Pair 0 1)"
    "```")
  (defn mapr! [g bifunctor]
    (bimap! &id g bifunctor))

  (doc fork
    "Takes a value to a bifunctor by mapping two functions, `f`, and `g` to the value."
    ""
    "```"
    "(the (Pair Int) (fork even? odd? 2))"
   "=> (Pair true false)"
    "```")
  (defn fork [f g x]
    (product (fmap f (pure x)) (fmap g (pure x))))

  (doc bi-sequence
    ("Sequences functions contained in a bifunctor `fs` over " false)
    "the left and right components of another bifunctor `xs`."
    ""
    "```"
    "(bi-sequence (Pair even? odd?) (Pair 2 1))"
    "=> (Pair true true)"
    "```")
  (sig bi-sequence (Fn [(f (Fn [x] z) (Fn [b] d)) (f x b)] (f z d)))
  (defn bi-sequence [fs xs]
    (let [fs* &fs
          xs* &xs]
      (product (sequence (transforml @fs*) (transforml @xs*))
               (sequence (transformr fs) (transformr xs)))))

  (doc bi-bind
    ("Binds functions `f` and `g` over the left and right components of " false)
    "a bifunctor."
    ""
    "```"
    "(bi-bind &(fn [_] (Identity 2)) &(fn [_] (Identity 3)) (Pair \a \b))"
    "=> (Pair 2 3))"
    "```")
  (sig bi-bind (Fn [(Ref (Fn [a] (f b))) (Ref (Fn [c] (g d))) (h a c)] (h b d)))
  (defn bi-bind [f g bi-functor]
    (product (bind (transforml bi-functor) f)
             (bind (transformr bi-functor) g)))
)


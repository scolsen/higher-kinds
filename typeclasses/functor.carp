;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.
(load "higher-kinds.carp")

;; The fmap interface, defined against the type of type constructors (higher-kinds)
(definterface fmap (Fn [(Ref (Fn [a] b)) (Constructor a t)] (Constructor b t)))

;; Functor
;; Instances must implement fmap at minimum.
(defmodule Functor

  (doc functor?
    "Returns true if a given kind is a Functor instance.

    In other words, returns true if the kind implements fmap.")
  (defndynamic functor? [k]
    (list 'defined? (Symbol.prefix k 'fmap)))

  (doc instance
    "Defines a functor 'instance' for a kind `k`.

     Types must define the `fmap` function against their branded constructors.")
  (defmacro instance [k]
    (let [prefixed (Symbol.prefix k 'fmap)
          constructors (members k)]
      (list 'do
        (list 'when (list 'not (list 'defined? (Symbol.prefix k 'fmap)))
                  (list 'macro-error
                    (Dynamic.String.join ["Type " (str k)
                    " was declared as a functor instance but does"
                    " not implement fmap. Use Functor.derive-fmap to automatically"
                    " derive an implmentation for the type, or define a custom"
                    " implementation."])))
        (list 'defmodule k (list 'defn 'functor (array 'm)
          (list (Symbol.prefix k 'constructor) 'm))))))

  (hidden derive-fmap-internal)
  (defndynamic derive-fmap-internal [k constructors acc]
    (if (= 0 (length constructors))
    (list 'defmodule k
      (list 'defn 'fmap (array 'f 'c)
        (list 'match 'c (list 'Constructor.App 'x 'b)
          acc)))
    (let [constructor (Symbol.prefix (Symbol.join [k 'Brand])
                        (car (car constructors)))]
    (Functor.derive-fmap-internal k (cdr constructors)
      (cons-last (list 'Constructor.App (list (list 'deref 'f) 'x) (list constructor))
                 (cons-last (list constructor) acc))))))

  (doc derive-fmap
   "Dervie an fmap implementation for the given type.

    Derive will produce the 'obvious' variant of the function in terms of your
    branded type constructor.

    Concretely, it defines roughly, the following function:

    (fn [f x] (match x (Constructor a b) (match b (Brand.One) (Constructor (f x)
    Brand.One) (Brand.Two) ...))).

    If you need a more sophisticated implementation, you can define fmap
    directly according to the fmap interface.")
  (defmacro derive-fmap [k]
    (list 'if (list 'not (Kinds.kind? k))
              (list 'macro-error (Dynamic.String.join
                ["Tried to derive an fmap instance for type "
                 (str k)
                 ", but it is not a kind. Call `(Kinds.kind "
                 (str k)
                 ")` to make this type a kind."]))
              (Functor.derive-fmap-internal k (members k) (list 'match 'b))))

 (doc replace
   "Replaces the inhabitants of a Functor with a constant value `x`.

   Analogous to <$ in Haskell.")
 (defn replace [x c]
   (fmap &(const x) c))
)


;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

;; The fmap interface, defined against the type of type constructors (higher-kinds)
(definterface fmap (Fn [(Ref (Fn [a] b)) (f a)] (f b)))

;; Functor
;; Instances must implement fmap at minimum.
(defmodule Functor
  (doc functor?
    "Returns true if a given kind is a Functor instance.

    In other words, returns true if the kind implements fmap.")
  (defndynamic functor? [k]
    ;; We cannot call defined directly, otherwise it evaluates
    ;; against "(Symbol.prefix k)" instead of the result of that computation
    (list 'defined? (Symbol.prefix k 'fmap)))

 (doc replace
   "Replaces the inhabitants of a Functor with a constant value `x`.

   Analogous to <$ in Haskell.")
 (defn replace [x c]
   (fmap &(const x) c))
)

